#!/bin/bash

# Nagios script to check ElasticSearch health.
# Writen by Diego Lucas Jimenez, 2017, for Projectplace.

# Dependencies: curl bc

# 19/09/2016 Initial version

# help
#  curl "***REMOVED***:9200/_cat/nodes?help"
# Heap crit and warn against average
# ***REMOVED***:9200/_cat/nodes/?h=name,ram.percent,heap.percent,file_desc.percent,load_5m

# https://www.datadoghq.com/blog/monitor-elasticsearch-performance-metrics/#toc-memory-usage-and-garbage-collection
# To control
# Search performance:
# search.query_time ms?
# search.query_current Number of queries
# search.fetch_current Number of fetches in progress now
# search.fetch_time Total time spent on fetches
# search.fetch_total Total number of fetches
# Indexing performance
# refresh 10-20 warning.

# Time per doc:
# indexing.index_time * 3600 *1000 ms / 
# indexing.index_total docs
# = ms / doc


VERSION=0.3
readonly me=`basename "$0"`

HOST=""
PORT=9200
NODES=

option=

warning=
critical=

setup () {
  checkArgs
  fetch_data
  filter_data
  split_data
  case $option in
    heap) heap_data;;
    ram) ram_data;;
    filedesc) filedesc_data;;
    load5) load_data;;
    cluster_health);;
    *) error "Unknown option" 1
  esac
}

error () {
  echo "ERROR: $1"
  exit $2
}

fetch_data () {
  fetched_data=$(curl -s "$HOST:$PORT/_cat/nodes?h=name,heap.percent,ram.percent,file_desc.percent,load_5m") || error "Host not found" $?
  local IFS=' '
  local arraypos=0
  while read line; do
    cluster_data[$arraypos]=${line}
    arraypos=$(($arraypos+1))
  done <<< ${fetched_data}
}

filter_data () {
  for line in "${cluster_data[@]}"; do
    if [[ $line == *"$HOST"* ]]; then
      host_data=${line}
    fi
  done
}

split_data () {
  IFS=' ' read -ra split_data <<< $host_data
}

set_levels () {
  if [ -z "$warning" ]; then
    case "$1" in
      heap) warning=85;;
      ram) warning=85;;
      filedesc) warning=80;;
      load) warning=1;;
    esac
  fi


  if [ -z "$critical" ]; then
    case "$1" in
      heap) critical=90;;
      ram) critical=90;;
      filedesc) critical=90;;
      load) critical=1.5;;
    esac
  fi
}

nagios_output () {
  local err_code=$3
  local message=$1
  local perfdata=$2
  local output=""

  case $err_code in
    0) output="OK - ";;
    1) output="WARNING - ";;
    2) output="CRITICAL - ";;
    *) output="UNKNOWN - "; err_code=3;;
  esac

  echo $output $message $perfdata
  exit $err_code ;
}

heap_data () {
  set_levels heap
  heap_usage=${split_data[1]}
  local perf_data="| heap=$heap_usage%;$warning;$critical;0;100"
  local err_code=3

  if [[ $heap_usage -gt $critical ]]; then
    err_code=2
  elif [[ $heap_usage -gt $warning ]]; then
    err_code=1
  else
    err_code=0
  fi

  nagios_output "Heap usage $heap_usage%; " "$perf_data" "$err_code"
}

ram_data () {
  set_levels ram
  ram_usage=${split_data[2]}
  local perf_data="| heap=$ram_usage%;$warning;$critical;0;100"
  local err_code=3

  if [[ $ram_usage -gt $critical ]]; then
    err_code=2
  elif [[ $ram_usage -gt $warning ]]; then
    err_code=1
  else
    err_code=0
  fi

  nagios_output "RAM usage $ram_usage%; " "$perf_data" "$err_code"
}

filedesc_data () {
  set_levels filedesc
  filedesc_usage=${split_data[3]}
  local perf_data="| filedesc=$filedesc_usage%;$warning;$critical;0;100"
  local err_code=3

  if [[ $filedesc_usage -gt $critical ]]; then
    err_code=2
  elif [[ $filedesc_usage -gt $warning ]]; then
    err_code=1
  else
    err_code=0
  fi

  nagios_output "File descriptors usage $filedesc_usage%; " "$perf_data" "$err_code"
}

load_data () {
  set_levels load
  load_usage=${split_data[4]}
  local perf_data="| load=$load_usage;$warning;$critical;0;"
  local err_code=3

  if (( $(echo "$load_usage > $critical" | bc -l) )); then
    err_code=2
  elif (( $(echo "$load_usage > $warning" | bc -l) )); then
    err_code=1
  else
    err_code=0
  fi

  nagios_output "Load avg 5m $load_usage; " "$perf_data" "$err_code"
}

# Checking the provided arguments are right
checkArgs () {
  # Host
  if [ -z "$HOST" ]; then
    error "No host defined" 3
  fi
  # Options
  if [ -z "$option" ]; then
    error "Please, choose an option to run" 3
  fi
}

version () {
  echo "$me VERSION $VERSION"
  exit 0;
}

# Help / Usage function
usage () {
  echo "  Checks Elasticsearch health."
  echo "  Usage: check_elasticsearch [-h|--help] | [-v|--version] | [-H \$HOST] [-o \$option][-w \$warning] [-c \$critical]"
  echo "  ~# check_elasticsearch -H elasticsearch.acme.com -w 80 -c 90"
  echo "  OK: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  echo ""
  echo "    -H \$host      : Host or ip"
  echo "    -P \$port      : Port, default 9200"

  echo "    -o \$option    : Option to check:"
  echo "       heap        : Heap usage percentage (w:85;c:90)"
  echo "       ram         : Ram usage percentage (w:85;c:90)"
  echo "                     High RAM allocation may occur if MAX_LOCKED_MEMORY is set to unlimited"
  echo "       filedesc    : Used file descriptor ratio (w:85;c:90)"
  echo "       load5       : Host load 5m (w:1;c:1.5)"

  echo "    -w \$warning   : Warning level"
  echo "    -c \$critical  : Critical level"
  echo "    -V | --version : Prints plugin version"
  echo "    -h | --help    : Shows this message"
}

# Args management
if [ "$#" -eq 0 ]; then
  echo "ERROR: Arguments required"
  usage
  exit 3
fi

while [ "$#" -gt 0 ]; do
  case "$1" in
    # Select operation to perform
    -o) option="$2"; shift 2;;
    # Parameters
    -H) HOST="$2"; shift 2;;
    -P) PORT="$2"; shift 2;;

    # Specific arguments
    -w) warning="$2"; shift 2;;
    -c) critical="$2"; shift 2;;

    # Other args
    -V) version;;
    --version) version;;

    -h) usage; exit 0;;
    --help) usage; exit 0;;
    *) echo "ERROR: Unknown option $1"; usage; exit 3;;
  esac
done

setup

