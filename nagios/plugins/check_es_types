#!/bin/bash

# Nagios script to check Elasticsearch types hits
# Writen by Diego Lucas Jimenez, 2017, for Projectplace.
# Types must be lowercase. ToDo: Convert to lowercase, check args (like n#)
# 31/11/2017 Initial version

ES_HOST="localhost"
ES_TYPE=
UTS=
UNIT_TIME="h"

HITS=
HITSxTIME=0

WARNING=5
CRITICAL=0

readonly VERSION=1.0
readonly me=`basename "$0"`

query_ES () {
  local temp_hits=$(curl -s -XGET "${ES_HOST}"':9200/_count?pretty' -H 'Content-Type: application/json' -d' 
  {
      "query" : {
          "bool": {
             "must": [
                 {
                     "term" : {
                         "type" : "'${ES_TYPE}'"
                     }
                 },
                 {
                     "range" : {
                         "@timestamp" : {
                             "gte" : "now-'${UTS}${UNIT_TIME}'/'${UNIT_TIME}'",
                             "lte" : "now/'${UNIT_TIME}'"
                         }
                     }
                 }
             ]
         }
     }
  }
  ' | grep "count" | cut -d' ' -f 5)
  if [ -n "${temp_hits}" ]; then
    HITS="${temp_hits:0:-1}"
  else
    echo "UNKNOWN"
    exit 3
  fi
}

calcHitsPerUT () {
  HITSxTIME=$(echo "scale=3;${HITS}/${UTS}" | bc -l)
}

nagios_output () {
  local perfdata="| ${ES_TYPE}=${HITSxTIME};${WARNING};${CRITICAL};0;;"

  if [ $(echo "${HITSxTIME}<=${CRITICAL}" | bc) -eq 1 ]; then
    echo "CRITICAL: ${ES_TYPE}=${HITSxTIME}/${UNIT_TIME} ${perfdata}"
    exit 2
  elif [ $(echo "${HITSxTIME}<=${WARNING}" | bc) -eq 1 ]; then
    echo "WARNING: ${ES_TYPE}=${HITSxTIME}/${UNIT_TIME} ${perfdata}"
    exit 1
  else
    echo "OK: ${ES_TYPE}=${HITSxTIME}/${UNIT_TIME} ${perfdata}"
    exit 0
  fi
}

setup () {
  query_ES
  calcHitsPerUT
  nagios_output
}

usage () {
  echo "$me -H elastichost -T syslog -t 1 -u h"
}

# Args management
if [ "$#" -eq 0 ]; then
  echo "ERROR: Arguments required"
  usage
  exit 3
fi

while [ "$#" -gt 0 ]; do
  case "$1" in
    # Select operation to perform
    -V) echo "${me} VERSION ${VERSION}"; exit 0;;
    --version)  echo "${me} VERSION ${VERSION}"; exit 0;;

    # Parameters
    -H) ES_HOST="$2"; shift 2;;
    -T) ES_TYPE="$2"; shift 2;;
    -t) UTS="$2"; shift 2;;
    -u) UNIT_TIME="$2"; shift 2;;

    # Thresholds
    -w) WARNING="$2"; shift 2;;
    -c) CRITICAL="$2"; shift 2;;

    # Other args
    -h) usage; exit 0;;
    --help) usage; exit 0;;
    *) echo "ERROR: Unknown option $1"; usage; exit 3;;
  esac
done

setup
