#!/bin/bash

# Nagios script to check Dell iDRAC 7
# Writen by Diego Lucas Jimenez, 2017, for Projectplace.

# It works better reading the MIBS file
# You should place it under /usr/share/mibs/ with rx perms so Nagios
# can read it or properly install it for your SNMP in your nagios host

# 05/10/2017 Initial version

readonly VERSION="1.1"
readonly SNMP_STATUS='1.3.6.1.4.1.674.10892.5.2'
readonly SNMP_SYSTEM_STATUS='1.3.6.1.4.1.674.10892.5.2.1'
#='IDRAC-MIB-SMIv2::globalSystemStatus'
readonly SNMP_LCD_STATUS='1.3.6.1.4.1.674.10892.5.2.2'
#'IDRAC-MIB-SMIv2::systemLCDStatus'
readonly SNMP_STORAGE_STATUS='1.3.6.1.4.1.674.10892.5.2.3'
#'IDRAC-MIB-SMIv2::globalStorageStatus'
readonly SNMP_POWER_STATE='1.3.6.1.4.1.674.10892.5.2.4'
#'iDRAC-MIB-SMIv2::systemPowerState'

readonly SNMP_UNKN='other | unknown'
readonly OID_UNKN='1 | 2'
readonly SNMP_OK='ok'
readonly OID_OK='3'
readonly SNMP_WARN='nonCritical'
readonly OID_WARN='4'
readonly SNMP_CRIT='critical | nonRecoverable'
readonly OID_CRIT='5 | 6'

readonly PWR_SNMP_UNKN='other | unknown'
readonly PWR_OID_UNKN='1 | 2'
readonly PWR_SNMP_OK='on'
readonly PWR_OID_OK='4'
readonly PWR_SNMP_CRIT='off'
readonly PWR_OID_CRIT='3'

readonly SNMP_NOT_FOUND='No Such Instance currently exists at this OID'


# User Args
HOST=""
COMMUNITY="public"
MIB_FILE="/usr/share/mibs/idrac-smiv2.mib"

STATUS=""
EXIT_CODE=
OUTPUT=""

# Functions to be called
setup () {
  checkArgs
  checkSystem
  checkLcd
  checkStorage
  checkPower
  printOutput
}

# Checking the provided arguments are right
checkArgs () {
  # Host
  if [ -z "$SNMP_HOST" ]; then
    echo "ERROR: No host defined"
    exit 3
  fi
  # # Check MIB file
  # if [ ! -r "$MIB_FILE" ]; then
  #   echo "ERROR: MIB file not found or permission problem"
  #   exit 3
  # fi
}

checkSystem () {
  checkSNMP "${SNMP_SYSTEM_STATUS}" "System"
}

checkLcd () {
  checkSNMP "${SNMP_LCD_STATUS}" "LCD"
}

checkStorage () {
  checkSNMP "${SNMP_STORAGE_STATUS}" "Storage"
}

checkPower () {
  checkSNMP "${SNMP_POWER_STATE}" "Power"
}

checkSNMP () {
  local MIB="$1"
  local subsystem="$2"

  HEALTH_STATUS=$(snmpwalk -v2c -O Qv -m ${MIB_FILE} -c ${COMMUNITY} ${SNMP_HOST} ${MIB} 2>/dev/null)
  
  if [ "${subsystem}" == "Power" ]; then
    STATUS_UNKN="${PWR_SNMP_UNKN}"
    CODE_UNKN="${PWR_OID_UNKN}"
    STATUS_OK="${PWR_SNMP_OK}"
    CODE_OK="${PWR_OID_OK}"
    STATUS_CRIT="${PWR_SNMP_CRIT}"
    CODE_CRIT="${PWR_OID_CRIT}"
    STATUS_WARN="null"
    CODE_WARN="123456789"
  else
    STATUS_UNKN="${SNMP_UNKN}"
    CODE_UNKN="${OID_UNKN}"
    STATUS_OK="${SNMP_OK}"
    CODE_OK="${OID_OK}"
    STATUS_WARN="${SNMP_WARN}"
    CODE_WARN="${OID_WARN}"
    STATUS_CRIT="${SNMP_CRIT}"
    CODE_CRIT="${OID_CRIT}"
  fi

  if [ -z "${HEALTH_STATUS}" ] || [ "${HEALTH_STATUS}" == "${SNMP_NOT_FOUND}" ]; then
    setUnknown
  fi

  case "${HEALTH_STATUS}" in
    "${STATUS_CRIT}" | "${CODE_CRIT}") setCritical ;;
    "${STATUS_WARN}" | "${CODE_WARN}") setWarning ;;
    "${STATUS_OK}" | "${CODE_OK}") setOk ;;
    "${STATUS_UNKN}" | "${CODE_UNKN}") setUnknown ;;
  esac

  OUTPUT="${OUTPUT}${subsystem}=${HEALTH_STATUS} "
}

setWarning () {
  if [ "${STATUS}" != "CRITICAL" ]; then
    STATUS="WARNING"
    EXIT_CODE=1
  fi
}

setCritical () {
  STATUS="CRITICAL"
  EXIT_CODE=2
}

setUnknown () {
  if [ "${STATUS}" != "CRITICAL" ] && [ "${STATUS}" != "WARNING" ]; then
    STATUS="UNKNOWN"
    EXIT_CODE=3
  fi
}

setOk () {
  if [ "${STATUS}" != "CRITICAL" ] \
    && [ "${STATUS}" != "WARNING" ] \
    && [ "${STATUS}" != "UNKNOWN" ]; then
    STATUS="OK"
    EXIT_CODE=0
  fi
}

printOutput () {
  setOk
  OUTPUT="${STATUS};${OUTPUT}"
  echo "${OUTPUT}"
  exit $EXIT_CODE
}

# Help / Usage function
usage () {
  echo "  Check Dell iDRAC health."
  echo "  Usage: check_idrac [[-h|--help] | [-v|--version]] -H \$HOST [-C \$COMMUNITY] [-M \$MIB]"
  echo "  ~# check_idrac -H eql.acme.com -C communString -M /pathToMIB"
  echo "  OK;System=ok LCD=ok Storage=ok Power=on"
  echo ""
  echo "    -h | --help   : Shows this message"
  echo "    -V | --version : Prints plugin version"
  echo "    -H \$host     : Host or ip"
  echo "    -C \$community: SNMP Community string (default public)"
  echo "    -M \$MIB      : MIB file (default $MIB_FILE)"
}

# Args management
if [ "$#" -eq 0 ]; then
  echo "ERROR: Arguments required"
  usage
  exit 3
fi

while [ "$#" -gt 0 ]; do
  case "$1" in
    # Select operation to perform
    -V) echo "check_idrac VERSION $VERSION"; exit 0;;
    --version) echo "check_idrac VERSION $VERSION"; exit 0;;

    # Parameters
    -H) SNMP_HOST="$2"; shift 2;;
    -C) COMMUNITY="$2"; shift 2;;
    -M) MIB_FILE="$2"; shift 2;;

    # Other args
    -h) usage; exit 0;;
    --help) usage; exit 0;;
    *) echo "ERROR: Unknown option $1"; usage; exit 3;;
  esac
done

setup